#!/usr/bin/env php
<?php
/**
 * SCSSPHP
 *
 * @copyright 2012-2015 Leaf Corcoran
 *
 * @license http://opensource.org/licenses/MIT MIT
 *
 * @link http://leafo.github.io/scssphp
 */

error_reporting(E_ALL);

if (version_compare(PHP_VERSION, '5.3') < 0) {
    die('Requires PHP 5.3 or above');
}

include __DIR__ . '/../scss.inc.php';

use Leafo\ScssPhp\Compiler;
use Leafo\ScssPhp\Parser;
use Leafo\ScssPhp\SourceMap;
use Leafo\ScssPhp\Version;

$precision = null;
$style = null;
$dumpTree = false;
$loadPaths = null;
$changeDir = false;
$inputFile = null;
$outputFile = null;
$sourceMapFile = null;
$sourceMap = SourceMap::NONE;
$debugInfo = false;
$lineNumbers = false;

/**
 * Parse argument
 *
 * @param integer $i
 * @param array $options
 *
 * @return string|null
 */
function parseArgument(&$i, $options) {
    global $argc;
    global $argv;

    if (! preg_match('/^(?:' . implode('|', (array) $options) . ')=?(.*)/', $argv[$i], $matches)) {
        return;
    }

    if (strlen($matches[1])) {
        return $matches[1];
    }

    if ($i + 1 < $argc) {
        $i++;

        return $argv[$i];
    }
}

for ($i = 1; $i < $argc; $i++) {
    if ($argv[$i] === '-h' || $argv[$i] === '--help') {
        $exe = $argv[0];

        $HELP = <<<EOT
Usage: $exe [options] [input-file [output-file.css [sourcemap-file.map]]]

Options include:

    --debug-info        Annotate selectors with CSS referring to the source file and line number
    -h, --help          Show this message
    -f=format           Set the output format (compact, compressed, crunched, expanded, or nested)
    -i=path             Set import path
    --line-numbers      Annotate selectors with comments referring to the source file and line number
    -p=precision        Set decimal number precision (default 5)
    --sourcemap         Generate sourcemap (default: auto)
    --sourcemap=option  Set the sourcmap option (auto, file, inline, or none)
    -T                  Dump formatted parse tree
    -v, --version       Print the version

EOT;
        exit($HELP);
    }

    if ($argv[$i] === '-v' || $argv[$i] === '--version') {
        exit(Version::VERSION . "\n");
    }

    if ($argv[$i] === '--debug-info') {
        $debugInfo = true;
        continue;
    }

    if ($argv[$i] === '--line-numbers' || $argv[$i] === '--line-comments') {
        $lineNumbers = true;
        continue;
    }

    if ($argv[$i] === '-T') {
        $dumpTree = true;
        continue;
    }

    if ($argv[$i] === '--sourcemap') {
        $sourceMap = SourceMap::AUTO;
        continue;
    }

    $value = parseArgument($i, array('--sourcemap'));

    if (isset($value)) {
        $sourceMap = $value;
        continue;
    }

    $value = parseArgument($i, array('-f', '--style'));

    if (isset($value)) {
        $style = $value;
        continue;
    }

    $value = parseArgument($i, array('-i', '--load_paths'));

    if (isset($value)) {
        $loadPaths = $value;
        continue;
    }

    $value = parseArgument($i, array('-p', '--precision'));

    if (isset($value)) {
        $precision = $value;
        continue;
    }

    if ($inputFile === null) {
        $inputFile = $argv[$i];
        continue;
    }

    if ($outputFile === null) {
        $outputFile = $argv[$i];
        continue;
    }

    if ($sourceMapFile === null) {
        $sourceMapFile = $argv[$i];
        continue;
    }

    exit("{$argv[0]}: Unrecognized parameter: {$argv[$i]}\n");
}

if (! in_array($sourceMap, array(SourceMap::NONE, SourceMap::AUTO, SourceMap::FILE, SourceMap::INLINE))) {
    exit("{$argv[0]}: Unrecognized sourcemap option: $sourceMap\n");
}

if ($inputFile) {
    if ($inputFile === '-') {
        $inputFile = null;
    } elseif (! file_exists($inputFile)) {
        exit("{$argv[0]}: Input file: $inputFile doesn't exist\n");
    }
}

if ($inputFile) {
    $data = file_get_contents($inputFile);

    $newWorkingDir = dirname(realpath($inputFile));
    $oldWorkingDir = getcwd();

    if ($oldWorkingDir !== $newWorkingDir) {
        $changeDir = chdir($newWorkingDir);
        $inputFile = basename($inputFile);
    }
} else {
    $data = '';

    while ( ! feof(STDIN)) {
        $data .= fread(STDIN, 8192);
    }
}

if ($dumpTree) {
    $parser = new Parser($inputFile ?: 'STDIN');

    print_r(json_decode(json_encode($parser->parse($data)), true));

    exit();
}

$scss = new Compiler();
$scss->setSourceMap($sourceMap);

if ($debugInfo && $inputFile) {
    $scss->setLineNumberStyle(Compiler::DEBUG_INFO);
}

if ($lineNumbers && $inputFile) {
    $scss->setLineNumberStyle(Compiler::LINE_COMMENTS);
}

if ($loadPaths) {
    $scss->setImportPaths(explode(PATH_SEPARATOR, $loadPaths));
}

if ($precision) {
    $scss->setNumberPrecision($precision);
}

if ($style) {
    $scss->setFormatter('Leafo\\ScssPhp\\Formatter\\' . ucfirst($style));
}

echo $scss->compile($data, $inputFile ?: 'STDIN');

if ($changeDir) {
    chdir($oldWorkingDir);
}
